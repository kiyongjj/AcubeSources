/**
 * 
 */
package com.sds.acube.ndisc.mts.util.sea;

import com.sds.acube.ndisc.mts.common.NDCommon;
import com.sds.acube.ndisc.mts.common.NDConstant;
import com.sds.acube.ndisc.mts.util.sea.KeyList; 

/**
 * @author 윤병준
 *
 */
public class Sea128 {
	
	private static final int ROUND = 16;
	private KeyList seaKey = new KeyList(ROUND);
		
	private char[] SA = {
			 0x1,  0xfe, 0x1c, 0xfd, 0x8a, 0x43, 0x4a, 0x28,
			 0x8f, 0xea, 0x13, 0x41, 0xed, 0x71, 0xd4, 0xd3,
			 0x68, 0x2c, 0x47, 0x95, 0x9e, 0xdc, 0xd9, 0xb5,
			 0x86, 0xcd, 0x10, 0x3d, 0xd7, 0x77, 0x53, 0x5b,
			 0xd,  0x7d, 0x2f, 0xad, 0xb1, 0x48, 0x29, 0xaa,
			 0x60, 0xee, 0x2,  0xf0, 0x3f, 0x6f, 0x54, 0x51,
			 0x66, 0x70, 0x22, 0x26, 0xbd, 0xbf, 0xbb, 0x39,
			 0x7c, 0xe,  0x49, 0xc4, 0x7a, 0xc2, 0xe8, 0x73,
			 0xa9, 0xc1, 0x32, 0xec, 0x67, 0x6b, 0xd1, 0x5f,
			 0x90, 0xb2, 0x80, 0xdd, 0xab, 0xf,  0x61, 0x63,
			 0x36, 0xf8, 0x38, 0x27, 0x2b, 0xb,  0x76, 0x50,
			 0x21, 0x52, 0xba, 0x82, 0xe5, 0xe2, 0x64, 0xb4,
			 0xd0, 0xa0, 0xfa, 0x15, 0x7e, 0x87, 0x8d, 0xe4,
			 0x6c, 0xa5, 0x20, 0x9b, 0xe6, 0xcc, 0xa6, 0x7b,
			 0x1a, 0x8e, 0x5e, 0x65, 0xf1, 0x37, 0xeb, 0x8c,
			 0x4d, 0xe3, 0x4,  0xdf, 0x3,  0x85, 0xa2, 0xa8,
			 0x0,  0xcf, 0x44, 0x4c, 0x45, 0x12, 0xda, 0x72,
			 0xc3, 0x2d, 0x92, 0xb7, 0xf4, 0x7,  0xef, 0x91,
			 0x30, 0x79, 0x97, 0xe7, 0xce, 0xb9, 0x9d, 0x31,
			 0x1f, 0x4f, 0x18, 0xde, 0x69, 0x1e, 0x78, 0xc6,
			 0x33, 0xe0, 0xdb, 0x4e, 0x56, 0x23, 0xa,  0x58,
			 0x42, 0xa4, 0x4b, 0x3b, 0xf5, 0xfb, 0xc8, 0x57,
			 0x9f, 0x7f, 0x89, 0x2a, 0xfc, 0xbe, 0x25, 0xf7,
			 0xd8, 0x75, 0x40, 0x9,  0xf3, 0xa7, 0x59, 0xf6,
			 0x34, 0x16, 0xbc, 0xca, 0x17, 0x6e, 0xe9, 0xc5,
			 0x9a, 0xf9, 0x8,  0x81, 0x6,  0x35, 0xb6, 0xb8,
			 0x99, 0xa1, 0x88, 0x98, 0xc7, 0x24, 0x8b, 0x55,
			 0xd6, 0x5a, 0x1b, 0x3a, 0xc,  0x5c, 0xe1, 0x1d,
			 0x93, 0xf2, 0x11, 0x5d, 0xa3, 0xc0, 0x9c, 0x62,
			 0x3e, 0x2e, 0x6d, 0x83, 0xd2, 0x3c, 0x74, 0xb3,
			 0x19, 0xff, 0xcb, 0x5,  0xac, 0x46, 0x14, 0xb0,
			 0x84, 0x6a, 0x96, 0x94, 0xd5, 0xc9, 0xaf, 0xae			
	};
	
	private char[] SB = {
			 0x80, 0x0,  0x2a, 0x7c, 0x7a, 0xf3, 0xcc, 0x8d,
			 0xca, 0xbb, 0xa6, 0x55, 0xdc, 0x20, 0x39, 0x4d,
			 0x1a, 0xe2, 0x85, 0xa,  0xf6, 0x63, 0xc1, 0xc4,
			 0x9a, 0xf0, 0x70, 0xda, 0x2,  0xdf, 0x9d, 0x98,
			 0x6a, 0x58, 0x32, 0xa5, 0xd5, 0xb6, 0x33, 0x53,
			 0x7,  0x26, 0xb3, 0x54, 0x11, 0x89, 0xe9, 0x22,
			 0x90, 0x97, 0x42, 0xa0, 0xc0, 0xcd, 0x50, 0x75,
			 0x52, 0x37, 0xdb, 0xab, 0xed, 0x1b, 0xe8, 0x2c,
			 0xba, 0xb,  0xa8, 0x5,  0x82, 0x84, 0xf5, 0x12,
			 0x25, 0x3a, 0x6,  0xaa, 0x83, 0x78, 0xa3, 0x99,
			 0x57, 0x2f, 0x59, 0x1e, 0x2e, 0xd7, 0xa4, 0xaf,
			 0xa7, 0xbe, 0xd9, 0x1f, 0xdd, 0xe3, 0x72, 0x47,
			 0x28, 0x4e, 0xe7, 0x4f, 0x5e, 0x73, 0x30, 0x44,
			 0x10, 0x9c, 0xf9, 0x45, 0x68, 0xea, 0xc5, 0x2d,
			 0x31, 0xd,  0x87, 0x3f, 0xee, 0xb9, 0x56, 0x1d,
			 0x9e, 0x91, 0x3c, 0x6f, 0x38, 0x21, 0x64, 0xb1,
			 0x4a, 0xcb, 0x5b, 0xeb, 0xf8, 0x7d, 0x18, 0x65,
			 0xd2, 0xb2, 0x4,  0xd6, 0x77, 0x66, 0x71, 0x8,
			 0x48, 0x8f, 0x8a, 0xe0, 0xfb, 0x13, 0xfa, 0x92,
			 0xd3, 0xd0, 0xc8, 0x6b, 0xe6, 0x96, 0x14, 0xb0,
			 0x61, 0xd1, 0x7e, 0xe4, 0xa9, 0x69, 0x6e, 0xbd,
			 0x7f, 0x40, 0x27, 0x4c, 0xf4, 0x23, 0xff, 0xfe,
			 0xf7, 0x24, 0x49, 0xef, 0x5f, 0x17, 0xce, 0x8b,
			 0xcf, 0x95, 0x5a, 0x36, 0xc2, 0x34, 0xb5, 0x35,
			 0xe5, 0x41, 0x3d, 0x88, 0x3b, 0xc7, 0x9f, 0xd4,
			 0xae, 0xfd, 0xc3, 0xf2, 0x6d, 0x19, 0x94, 0x81,
			 0x60, 0x46, 0xec, 0xf,  0xe,  0xfc, 0xd8, 0x1c,
			 0xb8, 0x16, 0x86, 0xa2, 0x15, 0x4b, 0x9b, 0x7b,
			 0xa1, 0xde, 0x5d, 0x79, 0x67, 0x5c, 0x6c, 0x93,
			 0x3e, 0xc6, 0x9,  0x76, 0x43, 0xc,  0x29, 0x8e,
			 0x2b, 0x74, 0xe1, 0xbc, 0x8c, 0xac, 0xbf, 0xb7,
			 0x51, 0xc9, 0x62, 0xad, 0xb4, 0x3,  0x1, 0xf1	
	
	};
	
	
	private void cipher_func(long[] block, long[] kss){
		int i;
		long t, out;
		long temp;
		long left= block[0];
		long right = block[1];
		
		for(i=0;i<ROUND;i+=2){
			t=right^kss[i];
			temp=(((SB[(int) (t & 0xff)])+
				   (SA[(int) ((t>> 8) & 0xff)]))^
			 	  ((SB[(int) ((t>>16) & 0xff)])+
				   (SA[(int) ((t>>24) & 0xff)]))) & 0xff;
			out=( ((SB[ (int)(t & 0xff)]^temp))|
				  (((SA[(int) ((t>> 8)&0xff)]^temp)) << 8)|
				  (((SB[(int) ((t>>16)&0xff)]^temp)) <<16)|
				  (((SA[(int) ((t>>24)&0xff)]^temp)) <<24) ) ;
			left=out^left;

			t=left^kss[i+1];
			temp=(((SB[(int) (t & 0xff)])+
				   (SA[(int) ((t>> 8) & 0xff)]))^
			 	  ((SB[(int) ((t>>16) & 0xff)])+
				   (SA[(int) ((t>>24) & 0xff)]))) & 0xff;
			out=( ((SB[ (int) (t     &0xff)]^temp))|
				  (((SA[(int) ((t>> 8)&0xff)]^temp)) << 8)|
				  (((SB[(int) ((t>>16)&0xff)]^temp)) <<16)|
				  (((SA[(int) ((t>>24)&0xff)]^temp)) <<24) ) ;
			right=out^right;
		}
		block[0]=right;
		block[1]=left;		
	}
	
	private void key_schedule(long[] key, KeyList ks) {
		int i;
		long pai=0xbb40e64dL, delta=0x9e3779b9L;
		int[] n_rot={3,7,4,0,5,1,6,2,7,3,0,4,1,5,2,6};
		long filter = 0xffffffffL;
		pai= (pai+delta) & filter;
		
		long[] ek = ks.getEk();
		long[] dk = ks.getDk();
		
		ek[0]=(((key[0]^pai) << n_rot[0])&filter) | ((key[0]^pai) >> (32-n_rot[0]));
				
		pai=(pai+delta) & filter;
	
		ek[1]=(((key[1]^pai) << n_rot[1])&filter) | ((key[1]^pai) >> (32-n_rot[1]));
		
		pai=(pai+delta)&filter;
	
		ek[2]=(((key[2]^pai) << n_rot[2])&filter) | ((key[2]^pai) >> (32-n_rot[2]));
			
		pai=(pai+delta)&filter;
			
		ek[3]=(((key[3]^pai) << n_rot[3])&filter) | ((key[3]^pai) >> (32-n_rot[3]));
		
		for(i=4; i<ROUND; i++){
			pai=(pai+delta)&filter;
			ek[i]=( ((ek[i-4]^pai) << n_rot[i]) & filter)| ((ek[i-4]^pai) >> (32-n_rot[i]));			
		}	
		
		ek[ROUND]= 0;
		ek[ROUND+1] = 0;
		for(i=0; i<ROUND; i+=2){
			ek[ROUND]=ek[ROUND]^ek[i];
			ek[ROUND+1]=ek[ROUND+1]^ek[i+1];
		}
		for(i=0; i<ROUND; i++){
			dk[i]=ek[ROUND-i-1];
		}
		
		dk[ROUND]=ek[ROUND];
		dk[ROUND+1]=ek[ROUND+1];
		
		ks.setDk(dk);
		ks.setEk(ek);
	}
	
	private void encrypt(long[] block, long[] kss)
	{
		cipher_func(block, kss);
		block[0]=block[0]^kss[ROUND];
		block[1]=block[1]^kss[ROUND+1];
	}
	
	private void decrypt(long[] block, long[]kss)
	{
		block[0]=block[0]^kss[ROUND];
		block[1]=block[1]^kss[ROUND+1];
		cipher_func(block, kss);
	}	

	/**
	 * 
	 * @param keyVal
	 * @since 20160324 config.xml 의 storage > endian 설정값에 따라 정수의 바이트 순서 변경함
	 */
	public void SEA128_SetKey (char[] keyVal)
	{		
		long[] p32bitData = convertCharToLong(keyVal); 
		
		if (!NDCommon.ENDIAN.equals(NDConstant.BIG_ENDIAN)) {
			for (int i = 0; i < p32bitData.length; i++) {
				p32bitData[i] = swapLongByteOrder(p32bitData[i]);
			}
		}
		
		key_schedule(p32bitData, seaKey);
	}

	private long[] convertCharToLong(char[] keyVal){
		int sizeOfChar = keyVal.length;
		int sizeOfLong = sizeOfChar / 4;
		long[] p32bitData = new long[sizeOfLong];
		long p32bitBuff1, p32bitBuff2, p32bitBuff3, p32bitBuff4;
		int j=0;
		long filter = 0xffffffffL;
		
		for(int i=0;i<sizeOfLong;i++){
			p32bitBuff1 = (long)keyVal[j];
			p32bitBuff2 = (long)keyVal[j+1];
			p32bitBuff3 = (long)keyVal[j+2];
			p32bitBuff4 = (long)keyVal[j+3];
				
			p32bitData[i] = ((((p32bitBuff1 << 24)&filter) | ((p32bitBuff2 << 16)&filter) | ((p32bitBuff3 << 8)&filter) | p32bitBuff4))&filter;
			j += 4;
		}	
		
		return p32bitData;		
	}
	

	private char[] convertLongToChar(long[] ldata){
		int sizeOfLong = ldata.length;
		int sizeOfChar = sizeOfLong*4;
		char[] cdata = new char[sizeOfChar];
		long data1, data2, data3, data4;
		long filter = 0xffL;
		
		int j=0;
		for(int i=0;i<sizeOfLong;i++){
			data1 = ldata[i];
			data2 = ldata[i];
			data3 = ldata[i];
			data4 = ldata[i];
			
			cdata[j] = (char)(data1 >> 24);
			cdata[j+1] = (char)((data2 >> 16) & filter);
			cdata[j+2] = (char)((data3 >> 8) & filter);
			cdata[j+3] = (char)((data4) & filter);
			j += 4;
		}		
		
		return cdata;
	}
	
	/**
	 * 
	 * @param pchDataBuf
	 * @param nNumOfBlocks
	 * @return
	 * @since 20160324 config.xml 의 storage > endian 설정값에 따라 정수의 바이트 순서 변경함
	 */
	public char[] SEA128_Encrypt (char[] pchDataBuf, int nNumOfBlocks)
	{
		int	i;
		long[] p32bitData = null;
		long[] temp = new long[2];
		
		
		p32bitData = convertCharToLong(pchDataBuf);
	
		long[] ek = seaKey.getEk();

		for (i = 0;i < 2*nNumOfBlocks; i+=2)
		{
			temp[0] = p32bitData[i];
			temp[1] = p32bitData[i + 1];
			
			if (!NDCommon.ENDIAN.equals(NDConstant.BIG_ENDIAN)) {
				temp[0] = swapLongByteOrder(temp[0]);
				temp[1] = swapLongByteOrder(temp[1]);
			}
			
			encrypt(temp, ek);

			if (!NDCommon.ENDIAN.equals(NDConstant.BIG_ENDIAN)) {
				temp[0] = swapLongByteOrder(temp[0]);
				temp[1] = swapLongByteOrder(temp[1]);
			}

			p32bitData[i] = temp[0];
			p32bitData[i + 1] = temp[1];
		}	
		
		pchDataBuf = convertLongToChar(p32bitData);		
		
		
		return pchDataBuf;
	}	
	
	/**
	 * 
	 * @param pchDataBuf
	 * @param nNumOfBlocks
	 * @return
	 * @since 20160324 config.xml 의 storage > endian 설정값에 따라 정수의 바이트 순서 변경함
	 */
	public char[] SEA128_Decrypt (char[] pchDataBuf, int nNumOfBlocks)
	{
		int	i;
		long[] p32bitData = null;
		long[] temp = new long[2];

		p32bitData = convertCharToLong(pchDataBuf);
		
		long[] dk = seaKey.getDk();

		for (i = 0; i < 2*nNumOfBlocks; i+=2)
		{
			temp[0] = p32bitData[i];
			temp[1] = p32bitData[i + 1];
			
			if (!NDCommon.ENDIAN.equals(NDConstant.BIG_ENDIAN)) {
				temp[0] = swapLongByteOrder(temp[0]);
				temp[1] = swapLongByteOrder(temp[1]);
			}
			
			decrypt(temp, dk);

			if (!NDCommon.ENDIAN.equals(NDConstant.BIG_ENDIAN)) {
				temp[0] = swapLongByteOrder(temp[0]);
				temp[1] = swapLongByteOrder(temp[1]);
			}
			
			p32bitData[i] = temp[0];
			p32bitData[i + 1] = temp[1];
		}
		
		pchDataBuf = convertLongToChar(p32bitData);			
		
		return pchDataBuf;
	}
	
	/**
	 * value 의 바이트 순서를 거꾸로 정렬한 값을 반환
	 * @param value
	 * @return
	 * @since 20160323
	 */
	public long swapLongByteOrder(long value) {
		long data1, data2, data3, data4;
		long filter = 0xffL;
		long filter2 = 0xffffffffL;
		long swapValue;

		data4 = (char)(value >> 24);
		data3 = (char)((value >> 16) & filter);
		data2 = (char)((value >> 8) & filter);
		data1 = (char)((value) & filter);

		swapValue = ((((data1 << 24)&filter2) | ((data2 << 16)&filter2) | ((data3 << 8)&filter2) | data4))&filter2;

		return swapValue;
	}
}
